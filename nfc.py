# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""This is a copy of the nfc-bindings library on the running raspberry pi. This will
   NOT run on its own unless you have installed and compiled the related files
   on your device. I honestly can't even say if this works on anything other
   than a linux device with an SPI, UART, or I2C interface and an SPN532 NFC reader.
   """

"""Bindings for libnfc"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nfc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nfc')
    _nfc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nfc', [dirname(__file__)])
        except ImportError:
            import _nfc
            return _nfc
        if fp is not None:
            try:
                _mod = imp.load_module('_nfc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nfc = swig_import_helper()
    del swig_import_helper
else:
    import _nfc
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def init():
    """
    init() -> context

    Initialize libnfc. This function must be called before calling any other libnfc function.

    Returns
    -------
    context : nfc_context
        Output location for nfc_context
    """
    return _nfc.init()

def exit(context):
    """
    Deinitialize libnfc. Should be called after closing all open devices and before your application terminates.

    Parameters
    ----------
    context : nfc_context
        Output location for nfc_context
    """
    return _nfc.exit(context)

def open(*args):
    return _nfc.open(*args)
open = _nfc.open

def close(pnd):
    """
    Close from a NFC device.

    Parameters
    ----------
    pnd : nfc_device
        device that represents the currently used device

    """
    return _nfc.close(pnd)

def abort_command(pnd):
    """
    Abort current running command.

    Parameters
    ----------
    pnd : nfc_device
        device that represents the currently used device

    Returns
    -------
    ret : int
        Returns 0 on success, otherwise returns libnfc's error code.

    """
    return _nfc.abort_command(pnd)

def list_devices(context, connstrings):
    """
    Scan for discoverable supported devices.

    Only available for some drivers

    Parameters
    ----------
    context : nfc_context
        The context
    connstrings_len : int
        size of the connstrings array

    Returns
    -------
    connstrings : array of nfc_connstring
        devices list

    """
    return _nfc.list_devices(context, connstrings)

def idle(pnd):
    """
    Turn NFC device in idle mode.

    Parameters
    ----------
    pnd : nfc_device
        currently used device

    """
    return _nfc.idle(pnd)

def initiator_init(pnd):
    return _nfc.initiator_init(pnd)
initiator_init = _nfc.initiator_init

def initiator_init_secure_element(pnd):
    """
    Initialize NFC device as initiator with its secure element initiator (reader).

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    """
    return _nfc.initiator_init_secure_element(pnd)

def initiator_select_passive_target(pnd, nm, pbtInitData, szInitData, pnt):
    """
    Initialize NFC device as initiator with its secure element initiator (reader).

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    nm : nfc_modulation
        desired modulation
    pbtInitData : bytearray
        data
    szInitData : int
        data size
    pnt : nfc_target
        target

    Returns
    -------
    ret : int
        libnfc's error code

    """
    return _nfc.initiator_select_passive_target(pnd, nm, pbtInitData, szInitData, pnt)

def initiator_list_passive_targets(pnd, nm, ant):
    """
    List passive or emulated tags.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    nm : nfc_modulation
        desired modulation
    szTargets : int
        size of ant (will be the max targets listed)

    Returns
    -------
    ret : int
        number of targets found on success, otherwise returns libnfc's error code (negative value)
    ant : array of nfc_target
        will be filled with targets info

    """
    return _nfc.initiator_list_passive_targets(pnd, nm, ant)

def initiator_poll_target(pnd, pnmTargetTypes, szTargetTypes, uiPollNr, uiPeriod, pnt):
    """
    Poll for NFC targets.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pnmTargetTypes : nfc_modulation
        desired modulations
    szTargets : int
        size of pnmModulations
    uiPollNr : int
        specifies the number of polling (0x01 - 0xFE: 1 up to 254 polling, 0xFF: Endless polling)
    uiPeriod : int
        indicates the polling period in units of 150 ms (0x01 - 0x0F: 150ms - 2.25s)

    Returns
    -------
    ret : int
        polled targets count, otherwise returns libnfc's error code (negative value)
    pnt : nfc_target
        (over)writable struct

    """
    return _nfc.initiator_poll_target(pnd, pnmTargetTypes, szTargetTypes, uiPollNr, uiPeriod, pnt)

def initiator_select_dep_target(pnd, ndm, nbr, pndiInitiator, pnt, timeout):
    """
    Select a target and request active or passive mode for D.E.P. (Data Exchange Protocol).

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    ndm : nfc_dep_mode
        desired D.E.P. mode (NDM_ACTIVE or NDM_PASSIVE for active, respectively passive mode)
    nbr : nfc_baud_rate
        desired baud rate
    pndiInitiator : nfc_dep_info
        contains NFCID3 and General Bytes to set to the initiator device (optionnal, can be NULL)
    timeout : int
        timeout in milliseconds

    Returns
    -------
    ret : int
        selected D.E.P targets count on success, otherwise returns libnfc's error code (negative value).
    pnt : nfc_target
        (over)writable struct

    """
    return _nfc.initiator_select_dep_target(pnd, ndm, nbr, pndiInitiator, pnt, timeout)

def initiator_poll_dep_target(pnd, ndm, nbr, pndiInitiator, pnt, timeout):
    """
    Poll a target and request active or passive mode for D.E.P. (Data Exchange Protocol).

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    ndm :
        desired D.E.P. mode (NDM_ACTIVE or NDM_PASSIVE for active, respectively passive mode)
    nbr :
        desired baud rate
    pndiInitiator : nfc_dep_info
        contains NFCID3 and General Bytes to set to the initiator device (optionnal, can be NULL)
    timeout : int
        timeout in milliseconds

    Returns
    -------
    ret : int
        selected D.E.P targets count on success, otherwise returns libnfc's error code (negative value).
    pnt :  nfc_target
        where target information will be put.

    """
    return _nfc.initiator_poll_dep_target(pnd, ndm, nbr, pndiInitiator, pnt, timeout)

def initiator_deselect_target(pnd):
    """
    Deselect target.

    Parameters
    ----------
    pnd : nfc_device
        represents the currently used device

    Returns
    -------
    ret : int
        0 on success, otherwise returns libnfc's error code (negative value).

    """
    return _nfc.initiator_deselect_target(pnd)

def initiator_transceive_bytes(pnd, pbtTx, szTx, pbtRx, timeout):
    """
    Send data to target then retrieve data from target.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pbtTx : bytes
        contains a byte array of the frame that needs to be transmitted.
    szTx : int
        contains the length in bytes.
    szRx : int
        size of pbtRx (Will return NFC_EOVFLOW if RX exceeds this size)
    timeout : int
        timeout in milliseconds

    Returns
    -------
    ret : int
        received bytes count on success, otherwise returns libnfc's error code
    pbtRx : bytes
        response from the target

    """
    return _nfc.initiator_transceive_bytes(pnd, pbtTx, szTx, pbtRx, timeout)

def initiator_transceive_bits(pnd, pbtTx, szTxBits, pbtTxPar, pbtRx, pbtRxPar):
    """
    Transceive raw bit-frames to a target.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pbtTx : bytes
        contains a byte array of the frame that needs to be transmitted.
    szTxBits : int
        contains the length in bits
    pbtTxPar : bytes
        contains a byte array of the corresponding parity bits needed to send per byte.
    szRx : int
        size of pbtRx (Will return NFC_EOVFLOW if RX exceeds this size)

    Returns
    -------
    ret : int
        received bits count on success, otherwise returns libnfc's error code
    pbtRx : bytes
        response from the target
    pbtRxPar : bytes
        parameter contains a byte array of the corresponding parity bits

    """
    return _nfc.initiator_transceive_bits(pnd, pbtTx, szTxBits, pbtTxPar, pbtRx, pbtRxPar)

def initiator_transceive_bytes_timed(pnd, pbtTx, szTxBits, pbtRx):
    """
    Send data to target then retrieve data from target.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pbtTx : bytes
        contains a byte array of the frame that needs to be transmitted
    szTx : int
        contains the length in bytes
    pbtTxPar : bytes
        contains a byte array of the corresponding parity bits needed to send per byte.
    szRx : int
        size of pbtRx (Will return NFC_EOVFLOW if RX exceeds this size)

    Returns
    -------
    ret : int
        received bytes count on success, otherwise returns libnfc's error code
    pbtRx : bytes
        response from the target
    cycles : int
        number of cycles

    """
    return _nfc.initiator_transceive_bytes_timed(pnd, pbtTx, szTxBits, pbtRx)

def initiator_transceive_bits_timed(pnd, pbtTx, szTxBits, pbtTxPar, pbtRx, pbtRxPar):
    """
    Transceive raw bit-frames to a target.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pbtTx : bytes
        contains a byte array of the frame that needs to be transmitted.
    szTxBits : int
        contains the length in bits
    pbtTxPar : bytes
        contains a byte array of the corresponding parity bits needed to send per byte.
    szRx : int
        size of pbtRx (Will return NFC_EOVFLOW if RX exceeds this size)

    Returns
    -------
    ret : int
        received bits count on success, otherwise returns libnfc's error code
    pbtRx : bytes
        response from the target
    cycles : int
        number of cycles

    """
    return _nfc.initiator_transceive_bits_timed(pnd, pbtTx, szTxBits, pbtTxPar, pbtRx, pbtRxPar)

def target_init(pnd, pnt, pbtRx, timeout):
    """
    Initialize NFC device as an emulated tag.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pnt : nfc_target
        wanted emulated target
    timeout : int
        timeout in milliseconds

    Returns
    -------
    ret : int
        received bits count on success, otherwise returns libnfc's error code
    pbtRx : bytes
        response from the target

    """
    return _nfc.target_init(pnd, pnt, pbtRx, timeout)

def target_send_bytes(pnd, pbtTx, szTx, timeout):
    """
    Send bytes and APDU frames.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pbtTx : bytes
        Tx buffer
    timeout : int
        timeout in milliseconds

    Returns
    -------
    ret : int
        sent bytes count on success, otherwise returns libnfc's error code

    """
    return _nfc.target_send_bytes(pnd, pbtTx, szTx, timeout)

def target_receive_bytes(pnd, pbtRx, timeout):
    """
    Receive bytes and APDU frames.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pbtTx : bytes
        Tx buffer
    szRx : int
        size of Rx buffer
    timeout : int
        timeout in milliseconds

    Returns
    -------
    ret : int
        received bytes count on success, otherwise returns libnfc's error code
    pbtTx : bytes
        Rx buffer

    """
    return _nfc.target_receive_bytes(pnd, pbtRx, timeout)

def target_send_bits(pnd, pbtTx, szTxBits, pbtTxPar):
    """
    Send bytes and APDU frames.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    pbtTx : bytes
        Tx buffer
    timeout : int
        timeout in milliseconds

    Returns
    -------
    ret : int
        sent bytes count on success, otherwise returns libnfc's error code

    """
    return _nfc.target_send_bits(pnd, pbtTx, szTxBits, pbtTxPar)

def target_receive_bits(pnd, pbtRx, pbtRxPar):
    """
    Receive bit-frames.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    szRx : int
        size of Rx buffer

    Returns
    -------
    ret : int
        received bytes count on success, otherwise returns libnfc's error code
    pbtTx : bytes
        Rx buffer
    pbtRxPar : bytes
        parameter contains a byte array of the corresponding parity bits
    """
    return _nfc.target_receive_bits(pnd, pbtRx, pbtRxPar)

def strerror(pnd):
    """
    Return the last error string.

    Parameters
    ----------
    pnd : nfc_device
        the currently used device

    Returns
    -------
    error : string
        error string
    """
    return _nfc.strerror(pnd)

def strerror_r(pnd, buf, buflen):
    """
    Render the last error in buf for a maximum size of buflen chars.

    Parameters
    ---------
    pnd : nfc_device
        currently used device
    buf : string
        a string that contains the last error
    buflen : int
        size of buffer

    Returns
    -------
    ret : int
        0 upon success

    """
    return _nfc.strerror_r(pnd, buf, buflen)

def perror(pnd, s):
    """
    Display the last error occured on a nfc_device.

    Parameters
    ---------
    pnd : nfc_device
        currently used device
    s : string
        a string


    """
    return _nfc.perror(pnd, s)

def device_get_last_error(pnd):
    """
    Return the last error occured on a nfc_device.

    Parameters
    ---------
    pnd : nfc_device
        currently used device

    Returns
    -------
    ret : int
        represents libnfc's error code.

    """
    return _nfc.device_get_last_error(pnd)

def device_get_name(pnd):
    """
    Return the device name.

    Parameters
    ----------
    pnd : nfc_device
        currently used device

    Returns
    -------
    name : string
        device name

    """
    return _nfc.device_get_name(pnd)

def device_get_connstring(pnd):
    """
    Return the device connection string.

    Parameters
    ----------
    pnd : nfc_device
        currently used device

    Returns
    -------
    name : string
        device connection string
    """
    return _nfc.device_get_connstring(pnd)

def device_get_supported_modulation(pnd, mode, supported_mt):
    """
    Get supported modulations.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    mode : nfc_mode
        mode

    Returns
    -------
    ret : integet
        0 on success, otherwise returns libnfc's error code (negative value)
    supported_mt : nfc_modulation_type array
        the supported modulations

    """
    return _nfc.device_get_supported_modulation(pnd, mode, supported_mt)

def device_get_supported_baud_rate(pnd, nmt, supported_br):
    """
    Get supported baud rates.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    nmt : nfc_modulation_type
        desired modulation

    Returns
    -------
    ret : integer
        0 on success, otherwise returns libnfc's error code (negative value)
    supported_br : nfc_modulation_type array
        supported baud rates

    """
    return _nfc.device_get_supported_baud_rate(pnd, nmt, supported_br)

def device_set_property_int(pnd, property, value):
    """
    Set a device's integer-property value.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    property : nfc_property
        property which will be set
    value : int
        value

    Returns
    -------
    ret : int
        0 on success, otherwise returns libnfc's error code (negative value)

    """
    return _nfc.device_set_property_int(pnd, property, value)

def device_set_property_bool(pnd, property, bEnable):
    """
    Set a device's boolean-property value.

    Parameters
    ----------
    pnd : nfc_device
        currently used device
    property : nfc_property
        property which will be set
    bEnable : bool
        activate/disactivate the property

    Returns
    -------
    ret : int
        0 on success, otherwise returns libnfc's error code (negative value)
    """
    return _nfc.device_set_property_bool(pnd, property, bEnable)

def iso14443a_crc(pbtData, szLen, pbtCrc):
    """iso14443a_crc(pbtData, szLen, pbtCrc)"""
    return _nfc.iso14443a_crc(pbtData, szLen, pbtCrc)

def iso14443a_crc_append(pbtData, szLen):
    """iso14443a_crc_append(pbtData, szLen)"""
    return _nfc.iso14443a_crc_append(pbtData, szLen)

def iso14443b_crc(pbtData, szLen, pbtCrc):
    """iso14443b_crc(pbtData, szLen, pbtCrc)"""
    return _nfc.iso14443b_crc(pbtData, szLen, pbtCrc)

def iso14443b_crc_append(pbtData, szLen):
    """iso14443b_crc_append(pbtData, szLen)"""
    return _nfc.iso14443b_crc_append(pbtData, szLen)

def iso14443a_locate_historical_bytes(pbtAts, szAts, pszTk):
    """iso14443a_locate_historical_bytes(pbtAts, szAts, pszTk) -> ret"""
    return _nfc.iso14443a_locate_historical_bytes(pbtAts, szAts, pszTk)

def free(p):
    """
    free(p)

    Free buffer allocated by libnfc.
    """
    return _nfc.free(p)

def version():
    """
    Return the library version.

    Parameters
    ----------
    pnd : nfc_device
        currently used device

    Returns
    -------
      version : a string with the library version
    """
    return _nfc.version()

def device_get_information_about(pnd, buf):
    """
    Print information about NFC device.

    Parameters
    ----------
    pnd : nfc_device
        currently used device

    Returns
    -------
    ret : int
        number of characters printed (excluding the null byte used to end output to strings), otherwise returns libnfc's error code (negative value)
    buf : string
        information printed

    """
    return _nfc.device_get_information_about(pnd, buf)

def str_nfc_modulation_type(nmt):
    """
    Convert nfc_modulation_type value to string.

    Parameters
    ----------
    nmt : nfc_modulation_type
        modulation type

    Returns
    -------
    buf : string
        information printed

    """
    return _nfc.str_nfc_modulation_type(nmt)

def str_nfc_baud_rate(nbr):
    """
    Convert nfc_baud_rate value to string.

    Parameters
    ----------
    nbr : nfc_baud_rate
        rate to convert

    Returns
    -------
    buf : string
        the nfc baud rate

    """
    return _nfc.str_nfc_baud_rate(nbr)

def str_nfc_target(pnt, verbose):
    """
    Convert nfc_modulation_type value to string.

    Parameters
    ----------
    pnt : nfc_target
        struct to print
    verbose : bool
        verbosity

    Returns
    -------
    ret : int

    buf : string
        information printed

    """
    return _nfc.str_nfc_target(pnt, verbose)
NFC_BUFSIZE_CONNSTRING = _nfc.NFC_BUFSIZE_CONNSTRING
NP_TIMEOUT_COMMAND = _nfc.NP_TIMEOUT_COMMAND
NP_TIMEOUT_ATR = _nfc.NP_TIMEOUT_ATR
NP_TIMEOUT_COM = _nfc.NP_TIMEOUT_COM
NP_HANDLE_CRC = _nfc.NP_HANDLE_CRC
NP_HANDLE_PARITY = _nfc.NP_HANDLE_PARITY
NP_ACTIVATE_FIELD = _nfc.NP_ACTIVATE_FIELD
NP_ACTIVATE_CRYPTO1 = _nfc.NP_ACTIVATE_CRYPTO1
NP_INFINITE_SELECT = _nfc.NP_INFINITE_SELECT
NP_ACCEPT_INVALID_FRAMES = _nfc.NP_ACCEPT_INVALID_FRAMES
NP_ACCEPT_MULTIPLE_FRAMES = _nfc.NP_ACCEPT_MULTIPLE_FRAMES
NP_AUTO_ISO14443_4 = _nfc.NP_AUTO_ISO14443_4
NP_EASY_FRAMING = _nfc.NP_EASY_FRAMING
NP_FORCE_ISO14443_A = _nfc.NP_FORCE_ISO14443_A
NP_FORCE_ISO14443_B = _nfc.NP_FORCE_ISO14443_B
NP_FORCE_SPEED_106 = _nfc.NP_FORCE_SPEED_106
NDM_UNDEFINED = _nfc.NDM_UNDEFINED
NDM_PASSIVE = _nfc.NDM_PASSIVE
NDM_ACTIVE = _nfc.NDM_ACTIVE
class dep_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dep_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dep_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["abtNFCID3"] = _nfc.dep_info_abtNFCID3_set
    __swig_getmethods__["abtNFCID3"] = _nfc.dep_info_abtNFCID3_get
    if _newclass:
        abtNFCID3 = _swig_property(_nfc.dep_info_abtNFCID3_get, _nfc.dep_info_abtNFCID3_set)
    __swig_setmethods__["btDID"] = _nfc.dep_info_btDID_set
    __swig_getmethods__["btDID"] = _nfc.dep_info_btDID_get
    if _newclass:
        btDID = _swig_property(_nfc.dep_info_btDID_get, _nfc.dep_info_btDID_set)
    __swig_setmethods__["btBS"] = _nfc.dep_info_btBS_set
    __swig_getmethods__["btBS"] = _nfc.dep_info_btBS_get
    if _newclass:
        btBS = _swig_property(_nfc.dep_info_btBS_get, _nfc.dep_info_btBS_set)
    __swig_setmethods__["btBR"] = _nfc.dep_info_btBR_set
    __swig_getmethods__["btBR"] = _nfc.dep_info_btBR_get
    if _newclass:
        btBR = _swig_property(_nfc.dep_info_btBR_get, _nfc.dep_info_btBR_set)
    __swig_setmethods__["btTO"] = _nfc.dep_info_btTO_set
    __swig_getmethods__["btTO"] = _nfc.dep_info_btTO_get
    if _newclass:
        btTO = _swig_property(_nfc.dep_info_btTO_get, _nfc.dep_info_btTO_set)
    __swig_setmethods__["btPP"] = _nfc.dep_info_btPP_set
    __swig_getmethods__["btPP"] = _nfc.dep_info_btPP_get
    if _newclass:
        btPP = _swig_property(_nfc.dep_info_btPP_get, _nfc.dep_info_btPP_set)
    __swig_setmethods__["abtGB"] = _nfc.dep_info_abtGB_set
    __swig_getmethods__["abtGB"] = _nfc.dep_info_abtGB_get
    if _newclass:
        abtGB = _swig_property(_nfc.dep_info_abtGB_get, _nfc.dep_info_abtGB_set)
    __swig_setmethods__["szGB"] = _nfc.dep_info_szGB_set
    __swig_getmethods__["szGB"] = _nfc.dep_info_szGB_get
    if _newclass:
        szGB = _swig_property(_nfc.dep_info_szGB_get, _nfc.dep_info_szGB_set)
    __swig_setmethods__["ndm"] = _nfc.dep_info_ndm_set
    __swig_getmethods__["ndm"] = _nfc.dep_info_ndm_get
    if _newclass:
        ndm = _swig_property(_nfc.dep_info_ndm_get, _nfc.dep_info_ndm_set)

    def __init__(self):
        this = _nfc.new_dep_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_dep_info
    __del__ = lambda self: None
dep_info_swigregister = _nfc.dep_info_swigregister
dep_info_swigregister(dep_info)

class iso14443a_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iso14443a_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iso14443a_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["abtAtqa"] = _nfc.iso14443a_info_abtAtqa_set
    __swig_getmethods__["abtAtqa"] = _nfc.iso14443a_info_abtAtqa_get
    if _newclass:
        abtAtqa = _swig_property(_nfc.iso14443a_info_abtAtqa_get, _nfc.iso14443a_info_abtAtqa_set)
    __swig_setmethods__["btSak"] = _nfc.iso14443a_info_btSak_set
    __swig_getmethods__["btSak"] = _nfc.iso14443a_info_btSak_get
    if _newclass:
        btSak = _swig_property(_nfc.iso14443a_info_btSak_get, _nfc.iso14443a_info_btSak_set)
    __swig_setmethods__["szUidLen"] = _nfc.iso14443a_info_szUidLen_set
    __swig_getmethods__["szUidLen"] = _nfc.iso14443a_info_szUidLen_get
    if _newclass:
        szUidLen = _swig_property(_nfc.iso14443a_info_szUidLen_get, _nfc.iso14443a_info_szUidLen_set)
    __swig_setmethods__["abtUid"] = _nfc.iso14443a_info_abtUid_set
    __swig_getmethods__["abtUid"] = _nfc.iso14443a_info_abtUid_get
    if _newclass:
        abtUid = _swig_property(_nfc.iso14443a_info_abtUid_get, _nfc.iso14443a_info_abtUid_set)
    __swig_setmethods__["szAtsLen"] = _nfc.iso14443a_info_szAtsLen_set
    __swig_getmethods__["szAtsLen"] = _nfc.iso14443a_info_szAtsLen_get
    if _newclass:
        szAtsLen = _swig_property(_nfc.iso14443a_info_szAtsLen_get, _nfc.iso14443a_info_szAtsLen_set)
    __swig_setmethods__["abtAts"] = _nfc.iso14443a_info_abtAts_set
    __swig_getmethods__["abtAts"] = _nfc.iso14443a_info_abtAts_get
    if _newclass:
        abtAts = _swig_property(_nfc.iso14443a_info_abtAts_get, _nfc.iso14443a_info_abtAts_set)

    def __init__(self):
        this = _nfc.new_iso14443a_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_iso14443a_info
    __del__ = lambda self: None
iso14443a_info_swigregister = _nfc.iso14443a_info_swigregister
iso14443a_info_swigregister(iso14443a_info)

class felica_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, felica_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, felica_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["szLen"] = _nfc.felica_info_szLen_set
    __swig_getmethods__["szLen"] = _nfc.felica_info_szLen_get
    if _newclass:
        szLen = _swig_property(_nfc.felica_info_szLen_get, _nfc.felica_info_szLen_set)
    __swig_setmethods__["btResCode"] = _nfc.felica_info_btResCode_set
    __swig_getmethods__["btResCode"] = _nfc.felica_info_btResCode_get
    if _newclass:
        btResCode = _swig_property(_nfc.felica_info_btResCode_get, _nfc.felica_info_btResCode_set)
    __swig_setmethods__["abtId"] = _nfc.felica_info_abtId_set
    __swig_getmethods__["abtId"] = _nfc.felica_info_abtId_get
    if _newclass:
        abtId = _swig_property(_nfc.felica_info_abtId_get, _nfc.felica_info_abtId_set)
    __swig_setmethods__["abtPad"] = _nfc.felica_info_abtPad_set
    __swig_getmethods__["abtPad"] = _nfc.felica_info_abtPad_get
    if _newclass:
        abtPad = _swig_property(_nfc.felica_info_abtPad_get, _nfc.felica_info_abtPad_set)
    __swig_setmethods__["abtSysCode"] = _nfc.felica_info_abtSysCode_set
    __swig_getmethods__["abtSysCode"] = _nfc.felica_info_abtSysCode_get
    if _newclass:
        abtSysCode = _swig_property(_nfc.felica_info_abtSysCode_get, _nfc.felica_info_abtSysCode_set)

    def __init__(self):
        this = _nfc.new_felica_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_felica_info
    __del__ = lambda self: None
felica_info_swigregister = _nfc.felica_info_swigregister
felica_info_swigregister(felica_info)

class iso14443b_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iso14443b_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iso14443b_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["abtPupi"] = _nfc.iso14443b_info_abtPupi_set
    __swig_getmethods__["abtPupi"] = _nfc.iso14443b_info_abtPupi_get
    if _newclass:
        abtPupi = _swig_property(_nfc.iso14443b_info_abtPupi_get, _nfc.iso14443b_info_abtPupi_set)
    __swig_setmethods__["abtApplicationData"] = _nfc.iso14443b_info_abtApplicationData_set
    __swig_getmethods__["abtApplicationData"] = _nfc.iso14443b_info_abtApplicationData_get
    if _newclass:
        abtApplicationData = _swig_property(_nfc.iso14443b_info_abtApplicationData_get, _nfc.iso14443b_info_abtApplicationData_set)
    __swig_setmethods__["abtProtocolInfo"] = _nfc.iso14443b_info_abtProtocolInfo_set
    __swig_getmethods__["abtProtocolInfo"] = _nfc.iso14443b_info_abtProtocolInfo_get
    if _newclass:
        abtProtocolInfo = _swig_property(_nfc.iso14443b_info_abtProtocolInfo_get, _nfc.iso14443b_info_abtProtocolInfo_set)
    __swig_setmethods__["ui8CardIdentifier"] = _nfc.iso14443b_info_ui8CardIdentifier_set
    __swig_getmethods__["ui8CardIdentifier"] = _nfc.iso14443b_info_ui8CardIdentifier_get
    if _newclass:
        ui8CardIdentifier = _swig_property(_nfc.iso14443b_info_ui8CardIdentifier_get, _nfc.iso14443b_info_ui8CardIdentifier_set)

    def __init__(self):
        this = _nfc.new_iso14443b_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_iso14443b_info
    __del__ = lambda self: None
iso14443b_info_swigregister = _nfc.iso14443b_info_swigregister
iso14443b_info_swigregister(iso14443b_info)

class iso14443bi_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iso14443bi_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iso14443bi_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["abtDIV"] = _nfc.iso14443bi_info_abtDIV_set
    __swig_getmethods__["abtDIV"] = _nfc.iso14443bi_info_abtDIV_get
    if _newclass:
        abtDIV = _swig_property(_nfc.iso14443bi_info_abtDIV_get, _nfc.iso14443bi_info_abtDIV_set)
    __swig_setmethods__["btVerLog"] = _nfc.iso14443bi_info_btVerLog_set
    __swig_getmethods__["btVerLog"] = _nfc.iso14443bi_info_btVerLog_get
    if _newclass:
        btVerLog = _swig_property(_nfc.iso14443bi_info_btVerLog_get, _nfc.iso14443bi_info_btVerLog_set)
    __swig_setmethods__["btConfig"] = _nfc.iso14443bi_info_btConfig_set
    __swig_getmethods__["btConfig"] = _nfc.iso14443bi_info_btConfig_get
    if _newclass:
        btConfig = _swig_property(_nfc.iso14443bi_info_btConfig_get, _nfc.iso14443bi_info_btConfig_set)
    __swig_setmethods__["szAtrLen"] = _nfc.iso14443bi_info_szAtrLen_set
    __swig_getmethods__["szAtrLen"] = _nfc.iso14443bi_info_szAtrLen_get
    if _newclass:
        szAtrLen = _swig_property(_nfc.iso14443bi_info_szAtrLen_get, _nfc.iso14443bi_info_szAtrLen_set)
    __swig_setmethods__["abtAtr"] = _nfc.iso14443bi_info_abtAtr_set
    __swig_getmethods__["abtAtr"] = _nfc.iso14443bi_info_abtAtr_get
    if _newclass:
        abtAtr = _swig_property(_nfc.iso14443bi_info_abtAtr_get, _nfc.iso14443bi_info_abtAtr_set)

    def __init__(self):
        this = _nfc.new_iso14443bi_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_iso14443bi_info
    __del__ = lambda self: None
iso14443bi_info_swigregister = _nfc.iso14443bi_info_swigregister
iso14443bi_info_swigregister(iso14443bi_info)

class iso14443b2sr_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iso14443b2sr_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iso14443b2sr_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["abtUID"] = _nfc.iso14443b2sr_info_abtUID_set
    __swig_getmethods__["abtUID"] = _nfc.iso14443b2sr_info_abtUID_get
    if _newclass:
        abtUID = _swig_property(_nfc.iso14443b2sr_info_abtUID_get, _nfc.iso14443b2sr_info_abtUID_set)

    def __init__(self):
        this = _nfc.new_iso14443b2sr_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_iso14443b2sr_info
    __del__ = lambda self: None
iso14443b2sr_info_swigregister = _nfc.iso14443b2sr_info_swigregister
iso14443b2sr_info_swigregister(iso14443b2sr_info)

class iso14443b2ct_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iso14443b2ct_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iso14443b2ct_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["abtUID"] = _nfc.iso14443b2ct_info_abtUID_set
    __swig_getmethods__["abtUID"] = _nfc.iso14443b2ct_info_abtUID_get
    if _newclass:
        abtUID = _swig_property(_nfc.iso14443b2ct_info_abtUID_get, _nfc.iso14443b2ct_info_abtUID_set)
    __swig_setmethods__["btProdCode"] = _nfc.iso14443b2ct_info_btProdCode_set
    __swig_getmethods__["btProdCode"] = _nfc.iso14443b2ct_info_btProdCode_get
    if _newclass:
        btProdCode = _swig_property(_nfc.iso14443b2ct_info_btProdCode_get, _nfc.iso14443b2ct_info_btProdCode_set)
    __swig_setmethods__["btFabCode"] = _nfc.iso14443b2ct_info_btFabCode_set
    __swig_getmethods__["btFabCode"] = _nfc.iso14443b2ct_info_btFabCode_get
    if _newclass:
        btFabCode = _swig_property(_nfc.iso14443b2ct_info_btFabCode_get, _nfc.iso14443b2ct_info_btFabCode_set)

    def __init__(self):
        this = _nfc.new_iso14443b2ct_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_iso14443b2ct_info
    __del__ = lambda self: None
iso14443b2ct_info_swigregister = _nfc.iso14443b2ct_info_swigregister
iso14443b2ct_info_swigregister(iso14443b2ct_info)

class jewel_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jewel_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jewel_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["btSensRes"] = _nfc.jewel_info_btSensRes_set
    __swig_getmethods__["btSensRes"] = _nfc.jewel_info_btSensRes_get
    if _newclass:
        btSensRes = _swig_property(_nfc.jewel_info_btSensRes_get, _nfc.jewel_info_btSensRes_set)
    __swig_setmethods__["btId"] = _nfc.jewel_info_btId_set
    __swig_getmethods__["btId"] = _nfc.jewel_info_btId_get
    if _newclass:
        btId = _swig_property(_nfc.jewel_info_btId_get, _nfc.jewel_info_btId_set)

    def __init__(self):
        this = _nfc.new_jewel_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_jewel_info
    __del__ = lambda self: None
jewel_info_swigregister = _nfc.jewel_info_swigregister
jewel_info_swigregister(jewel_info)

class target_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, target_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, target_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nai"] = _nfc.target_info_nai_set
    __swig_getmethods__["nai"] = _nfc.target_info_nai_get
    if _newclass:
        nai = _swig_property(_nfc.target_info_nai_get, _nfc.target_info_nai_set)
    __swig_setmethods__["nfi"] = _nfc.target_info_nfi_set
    __swig_getmethods__["nfi"] = _nfc.target_info_nfi_get
    if _newclass:
        nfi = _swig_property(_nfc.target_info_nfi_get, _nfc.target_info_nfi_set)
    __swig_setmethods__["nbi"] = _nfc.target_info_nbi_set
    __swig_getmethods__["nbi"] = _nfc.target_info_nbi_get
    if _newclass:
        nbi = _swig_property(_nfc.target_info_nbi_get, _nfc.target_info_nbi_set)
    __swig_setmethods__["nii"] = _nfc.target_info_nii_set
    __swig_getmethods__["nii"] = _nfc.target_info_nii_get
    if _newclass:
        nii = _swig_property(_nfc.target_info_nii_get, _nfc.target_info_nii_set)
    __swig_setmethods__["nsi"] = _nfc.target_info_nsi_set
    __swig_getmethods__["nsi"] = _nfc.target_info_nsi_get
    if _newclass:
        nsi = _swig_property(_nfc.target_info_nsi_get, _nfc.target_info_nsi_set)
    __swig_setmethods__["nci"] = _nfc.target_info_nci_set
    __swig_getmethods__["nci"] = _nfc.target_info_nci_get
    if _newclass:
        nci = _swig_property(_nfc.target_info_nci_get, _nfc.target_info_nci_set)
    __swig_setmethods__["nji"] = _nfc.target_info_nji_set
    __swig_getmethods__["nji"] = _nfc.target_info_nji_get
    if _newclass:
        nji = _swig_property(_nfc.target_info_nji_get, _nfc.target_info_nji_set)
    __swig_setmethods__["ndi"] = _nfc.target_info_ndi_set
    __swig_getmethods__["ndi"] = _nfc.target_info_ndi_get
    if _newclass:
        ndi = _swig_property(_nfc.target_info_ndi_get, _nfc.target_info_ndi_set)

    def __init__(self):
        this = _nfc.new_target_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_target_info
    __del__ = lambda self: None
target_info_swigregister = _nfc.target_info_swigregister
target_info_swigregister(target_info)

NBR_UNDEFINED = _nfc.NBR_UNDEFINED
NBR_106 = _nfc.NBR_106
NBR_212 = _nfc.NBR_212
NBR_424 = _nfc.NBR_424
NBR_847 = _nfc.NBR_847
NMT_ISO14443A = _nfc.NMT_ISO14443A
NMT_JEWEL = _nfc.NMT_JEWEL
NMT_ISO14443B = _nfc.NMT_ISO14443B
NMT_ISO14443BI = _nfc.NMT_ISO14443BI
NMT_ISO14443B2SR = _nfc.NMT_ISO14443B2SR
NMT_ISO14443B2CT = _nfc.NMT_ISO14443B2CT
NMT_FELICA = _nfc.NMT_FELICA
NMT_DEP = _nfc.NMT_DEP
N_TARGET = _nfc.N_TARGET
N_INITIATOR = _nfc.N_INITIATOR
class modulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, modulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, modulation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nmt"] = _nfc.modulation_nmt_set
    __swig_getmethods__["nmt"] = _nfc.modulation_nmt_get
    if _newclass:
        nmt = _swig_property(_nfc.modulation_nmt_get, _nfc.modulation_nmt_set)
    __swig_setmethods__["nbr"] = _nfc.modulation_nbr_set
    __swig_getmethods__["nbr"] = _nfc.modulation_nbr_get
    if _newclass:
        nbr = _swig_property(_nfc.modulation_nbr_get, _nfc.modulation_nbr_set)

    def __init__(self):
        this = _nfc.new_modulation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_modulation
    __del__ = lambda self: None
modulation_swigregister = _nfc.modulation_swigregister
modulation_swigregister(modulation)

class target(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, target, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, target, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nti"] = _nfc.target_nti_set
    __swig_getmethods__["nti"] = _nfc.target_nti_get
    if _newclass:
        nti = _swig_property(_nfc.target_nti_get, _nfc.target_nti_set)
    __swig_setmethods__["nm"] = _nfc.target_nm_set
    __swig_getmethods__["nm"] = _nfc.target_nm_get
    if _newclass:
        nm = _swig_property(_nfc.target_nm_get, _nfc.target_nm_set)

    def __init__(self):
        this = _nfc.new_target()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfc.delete_target
    __del__ = lambda self: None
target_swigregister = _nfc.target_swigregister
target_swigregister(target)


def register_driver(driver):
    return _nfc.register_driver(driver)
register_driver = _nfc.register_driver

def initiator_target_is_present(pnd, pnt):
    return _nfc.initiator_target_is_present(pnd, pnt)
initiator_target_is_present = _nfc.initiator_target_is_present
NFC_SUCCESS = _nfc.NFC_SUCCESS
NFC_EIO = _nfc.NFC_EIO
NFC_EINVARG = _nfc.NFC_EINVARG
NFC_EDEVNOTSUPP = _nfc.NFC_EDEVNOTSUPP
NFC_ENOTSUCHDEV = _nfc.NFC_ENOTSUCHDEV
NFC_EOVFLOW = _nfc.NFC_EOVFLOW
NFC_ETIMEOUT = _nfc.NFC_ETIMEOUT
NFC_EOPABORTED = _nfc.NFC_EOPABORTED
NFC_ENOTIMPL = _nfc.NFC_ENOTIMPL
NFC_ETGRELEASED = _nfc.NFC_ETGRELEASED
NFC_ERFTRANS = _nfc.NFC_ERFTRANS
NFC_EMFCAUTHFAIL = _nfc.NFC_EMFCAUTHFAIL
NFC_ESOFT = _nfc.NFC_ESOFT
NFC_ECHIP = _nfc.NFC_ECHIP

__version__ = version()

import sys


def convBytes(pData):
    if sys.version_info[0] < -3:  # python 2
        byt = ord(pData)
    else:
        byt = pData
    return byt


def print_hex(pbtData, szBytes):
    """
    Print bytes in hexadecimal.

    Parameters
    ----------
    pbtData : bytes
        bytes to print
    szBytes : int
        size in bytes
    """
    for szPos in range(szBytes):
        sys.stdout.write("%02x  " % convBytes(pbtData[szPos]))
    print('')


def print_hex_bits(pbtData, szBits):
    """
    Print bits in hexadecimal.

    Parameters
    ----------
    pbtData : bytes
        bits to print
    szBits : int
        size in bits
    """
    szBytes = divmod(szBits, 8)[0]
    for szPos in range(szBytes):
        sys.stdout.write("%02x  " % convBytes(pbtData[szPos]))
    uRemainder = szBits % 8
# Print the rest bits
    if uRemainder != 0:
        if (uRemainder < 5):
            sys.stdout.write("%01x (%d bits)" % (convBytes(pbtData[szBytes]), uRemainder))
        else:
            sys.stdout.write("%02x (%d bits)" % (convBytes(pbtData[szBytes]), uRemainder))
    print('')


def print_nfc_target(pnt, verbose):
    """
    Print an nfc_target.

    Parameters
    ----------
    pnt : nfc_target
        (over)writable struct
    verbose : bool
        verbosity flag
    """
    ret, s = str_nfc_target(pnt, verbose)
    sys.stdout.write(s)

# This file is compatible with both classic and new-style classes.

